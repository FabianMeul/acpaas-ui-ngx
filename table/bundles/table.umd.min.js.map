{"version":3,"sources":["ng://table/lib/table/services/table-helper.service.ts","ng://table/lib/table/components/column-selector/column-selector.component.ts","ng://table/lib/table/components/table/table.component.ts","ng://table/lib/table/components/table.messages.ts","ng://table/lib/table/components/table-bar/table-bar.component.ts","ng://table/lib/table/components/table-cell/table-cell.component.ts","ng://table/lib/table/components/table-header/table-header.component.ts","ng://table/lib/table/components/index.ts","ng://table/lib/table/directives/index.ts","ng://table/lib/table/directives/table-bar-item/table-bar-item.directive.ts","ng://table/lib/table/directives/table-bar-search/table-bar-search.directive.ts","ng://table/lib/table/table.module.ts","ng://table/lib/table/classes/table.class.ts"],"names":["TableHelperService","prototype","getLabel","key","hasOwnProperty","label","getValue","value","getClass","classList","join","formatValue","item","index","this","format","Injectable","nextId","ColumnSelectorComponent","tableHelper","EventEmitter","id","updateDisplay","e","target","checked","columns","hidden","enableChildren","disableChildren","emitColumns","parent","map","o","disabled","indexOf","_this","move","i","findIndex","length","splice","setTimeout","currentTarget","update","emit","Component","args","selector","template","Input","Output","TableComponent","sort","order","prop","activeSorting","orderBy","clickRow","rowData","hasClickAction","rowClicked","changeDetection","ChangeDetectionStrategy","OnPush","TableBarComponent","ngDoCheck","countInvisibleItems","isInVisible","rectContainer","rectChild","bottom","top","ref","nativeElement","getBoundingClientRect","childNodes","nodeName","invisibleItems","toggle","open","ViewChild","TableCellComponent","viewContainerRef","componentFactoryResolver","changeDetectionRef","ngOnChanges","component","loadComponent","hasComponent","componentFactory","resolveComponentFactory","clear","createComponent","data","detectChanges","ViewContainerRef","ComponentFactoryResolver","ChangeDetectorRef","TableHeaderComponent","Components","Directives","Directive","HostBinding","TableModule","NgModule","imports","CommonModule","FormsModule","providers","declarations","exports","Table","BehaviorSubject","setRawData","rawData","updateFilteredData","setLastPage","updateRows","setRawColumns","rawColumns","updateColumns","setFilters","filters","addFilter","filter","push","setPage","page","Number","setLimit","limit","lastPage","setOrderBy","getOffset","d","filteredData","Math","ceil","sortData","selectData","rows","next","c","filterHiddenColumns","filterData","slice","forEach","parseData","a","b","offset"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TableColumn } from '../types/table.types';\n\n@Injectable()\nexport class TableHelperService {\n\tpublic getLabel(key: (TableColumn|string)): string {\n\t\treturn key.hasOwnProperty('label') ? (key as TableColumn).label : key as string;\n\t}\n\n\tpublic getValue(key: (TableColumn|string)): string {\n\t\treturn key.hasOwnProperty('value') ? (key as TableColumn).value : key as string;\n\t}\n\n\tpublic getClass(key: (TableColumn|string)): string {\n\t\treturn key.hasOwnProperty('classList') ? (key as TableColumn).classList.join(' ') : key as string;\n\t}\n\n\tpublic formatValue(item, key, index): any {\n\t\tconst value = item[this.getValue(key)];\n\t\treturn key.format ? key.format(value, key, item, index) : value;\n\t}\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { TableHelperService } from '../../services/table-helper.service';\n\n/** Used to generate unique ID's for each column selector component (idea from Angular Material --> tab-group component) */\nlet nextId = 0;\n\n@Component({\n\tselector: 'aui-column-selector',\n\ttemplate: `<ul class=\"a-list a-list--lined aui-column-selector\">\n\t<li *ngFor=\"let column of columns; let i = index; let isLast = last; let isFirst = first;\" class=\"animated\" [ngClass]=\"{show: i === currentTarget}\">\n\t\t<div class=\"a-input__checkbox a-input__checkbox--small\">\n\t\t\t<input type=\"checkbox\" id=\"checkbox-{{ id }}-{{ i }}-{{ tableHelper.getValue(column) }}\" name=\"checkbox-{{ tableHelper.getValue(column) }}\" [checked]=\"!column.hidden\" (change)=\"updateDisplay($event, i)\" [disabled]=\"column.disabled\">\n\t\t\t<label for=\"checkbox-{{ id }}-{{ i }}-{{ tableHelper.getValue(column) }}\">{{ tableHelper.getLabel(column) }}</label>\n\t\t</div>\n\t\t<div class=\"select-actions\">\n\t\t\t<button [disabled]=\"isFirst\" class=\"a-button-transparent a-button--tiny has-icon\" (click)=\"move(column, -1)\">\n\t\t\t\t<span class=\"fa fa-angle-up\"></span>\n\t\t\t</button>\n\t\t\t<button [disabled]=\"isLast\" class=\"a-button-transparent a-button--tiny has-icon\" (click)=\"move(column, 1)\">\n\t\t\t\t<span class=\"fa fa-angle-down\"></span>\n\t\t\t</button>\n\t\t</div>\n\t</li>\n<ul>\n`,\n})\nexport class ColumnSelectorComponent {\n\t@Input() columns;\n\t@Output() update = new EventEmitter();\n\tpublic id: number;\n\tpublic currentTarget;\n\n\tconstructor(public tableHelper: TableHelperService) {\n\t\tthis.id = nextId++;\n\t}\n\n\tpublic updateDisplay(e, index) {\n\t\tif (e.target.checked) {\n\t\t\tthis.columns[index].hidden = false;\n\t\t\tthis.enableChildren(this.columns[index]);\n\t\t} else {\n\t\t\tthis.columns[index].hidden = true;\n\t\t\tthis.disableChildren(this.columns[index]);\n\t\t}\n\n\t\tthis.emitColumns();\n\t}\n\n\tpublic enableChildren(parent) {\n\t\tthis.columns = this.columns.map((o) => {\n\t\t\tif (o.parent && o.disabled && o.parent.indexOf(parent.value) !== -1) {\n\t\t\t\to.disabled = false;\n\t\t\t\tthis.enableChildren(o);\n\t\t\t}\n\n\t\t\treturn o;\n\t\t});\n\t}\n\n\tpublic disableChildren(parent) {\n\t\tthis.columns = this.columns.map((o) => {\n\t\t\tif (o.parent && !o.disabled && o.parent.indexOf(parent.value) !== -1) {\n\t\t\t\to.disabled = true;\n\t\t\t\to.hidden = true;\n\t\t\t\tthis.disableChildren(o);\n\t\t\t}\n\n\t\t\treturn o;\n\t\t});\n\t}\n\n\tpublic move(key, i) {\n\t\tconst index = this.columns.findIndex((o) => {\n\t\t\treturn this.tableHelper.getValue(o) === this.tableHelper.getValue(key);\n\t\t});\n\t\tconst target = index + i;\n\n\t\tif (target < 0 || target > this.columns.length - 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.columns.splice(index, 1); // Delete previous key position\n\t\tthis.columns.splice(target, 0 , key); // Add new position\n\n\t\t// Use timeout to fix re-rendering issue\n\t\tsetTimeout(() => {\n\t\t\tthis.currentTarget = target;\n\t\t});\n\n\t\tthis.emitColumns();\n\t}\n\n\tpublic emitColumns() {\n\t\tthis.update.emit(this.columns);\n\t}\n}\n","import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { TableHelperService } from '../../services/table-helper.service';\nimport { TableColumn, OrderBy } from '../../types/table.types';\nimport * as DEFAULT_MESSAGES from '../table.messages';\n\n@Component({\n\tselector: 'aui-table',\n\ttemplate: `<div [ngClass]=\"{'a-table__wrapper-responsive': responsive}\">\n\t<table class=\"a-table a-table--striped aui-table\">\n\t\t<thead *ngIf=\"columns.length > 0\">\n\t\t\t<tr>\n\t\t\t\t<th *ngFor=\"let column of columns\" [ngClass]=\"tableHelper.getClass(column)\">\n\t\t\t\t\t<ng-container *ngIf=\"column.headerComponent\">\n\t\t\t\t\t\t<aui-table-header [label]=\"tableHelper.getLabel(column)\" [value]=\"tableHelper.getValue(column)\" [component]=\"column.headerComponent\"></aui-table-header>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngIf=\"!column.headerComponent\">\n\t\t\t\t\t\t<ng-container *ngIf=\"activeSorting\">\n\t\t\t\t\t\t\t<button *ngIf=\"!column.disableSorting && tableHelper.getValue(column) !== activeSorting?.key\" class=\"a-button a-button--tiny a-button--transparent has-icon-right\" (click)=\"sort(column, 'asc')\">\n\t\t\t\t\t\t\t\t{{ tableHelper.getLabel(column) }} <span class=\"fa fa-sort\"></span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button *ngIf=\"!column.disableSorting && tableHelper.getValue(column) === activeSorting?.key && activeSorting?.order === 'desc'\" class=\" a-button a-button--tiny a-button--transparent has-icon-right\" (click)=\"sort(column, 'asc')\">\n\t\t\t\t\t\t\t\t{{ tableHelper.getLabel(column) }} <span class=\"fa fa-sort-desc\"></span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button *ngIf=\"!column.disableSorting && tableHelper.getValue(column) === activeSorting?.key && activeSorting?.order === 'asc'\" class=\" a-button a-button--tiny a-button--transparent has-icon-right\" (click)=\"sort(column, 'desc')\">\n\t\t\t\t\t\t\t\t{{ tableHelper.getLabel(column) }} <span class=\"fa fa-sort-asc\"></span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<ng-container *ngIf=\"column.disableSorting\">\n\t\t\t\t\t\t\t\t{{ tableHelper.getLabel(column) }}\n\t\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t<ng-container *ngIf=\"!activeSorting\">\n\t\t\t\t\t\t\t{{ tableHelper.getLabel(column) }}\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr *ngIf=\"loading\">\n\t\t\t\t<td [colSpan]=\"columns.length\">\n\t\t\t\t\t<div class=\"table-loading\">\n\t\t\t\t\t\t{{ loadDataMessage }} <span class=\"a-spinner\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr *ngIf=\"!loading && columns.length === 0\">\n\t\t\t\t<td>{{ noColumnsMessage }}</td>\n\t\t\t</tr>\n\t\t\t<tr *ngIf=\"!loading && (!rows || rows.length === 0)\">\n\t\t\t\t<td [colSpan]=\"columns.length\">{{ noDataMessage }}</td>\n\t\t\t</tr>\n\t\t\t<ng-container *ngIf=\"!loading && columns.length > 0\">\n\t\t\t\t<tr *ngFor=\"let row of rows; let rowIndex = index\" (click)=\"clickRow(row)\" [ngClass]=\"{'a-table--clickable': hasClickAction}\">\n\t\t\t\t\t<td *ngFor=\"let column of columns\" [ngClass]=\"tableHelper.getClass(column)\">\n\t\t\t\t\t\t<aui-table-cell [value]=\"tableHelper.formatValue(row, column, rowIndex)\" [component]=\"column.component\"></aui-table-cell>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</ng-container>\n\t\t</tbody>\n\t</table>\n</div>\n`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\n})\nexport class TableComponent {\n\t@Input() rows: any[] = [];\n\t@Input() columns: (TableColumn|string)[] = [];\n\t@Input() loading = false;\n\t@Input() responsive = true;\n\t@Input() hasClickAction = false;\n\t@Input() activeSorting: OrderBy; // Just a property to use in the template, not functional\n\t@Input() noDataMessage = DEFAULT_MESSAGES.NO_DATA;\n\t@Input() loadDataMessage = DEFAULT_MESSAGES.LOAD_DATA;\n\t@Input() noColumnsMessage = DEFAULT_MESSAGES.NO_COLUMNS;\n\n\t@Output() orderBy: EventEmitter<any> = new EventEmitter();\n\t@Output() rowClicked: EventEmitter<any> = new EventEmitter();\n\n\tconstructor(\n\t\tpublic tableHelper: TableHelperService\n\t) {}\n\n\tpublic sort(key, order): void {\n\t\tconst prop = this.tableHelper.getValue(key);\n\t\tthis.activeSorting = {key: prop, order};\n\t\tthis.orderBy.emit({key: prop, order});\n\t}\n\n\tpublic clickRow(rowData: any): void {\n\t\tif (this.hasClickAction) {\n\t\t\tthis.rowClicked.emit(rowData);\n\t\t}\n\t}\n}\n","export const LOAD_DATA = 'Loading data...';\nexport const NO_DATA = 'No data available.';\nexport const NO_COLUMNS = 'No columns available.';\n","import { Component, Input, Output, EventEmitter, HostBinding, ViewChild, DoCheck } from '@angular/core';\nimport { Filter } from '@acpaas-ui/ngx-components/utils';\n\n@Component({\n\tselector: 'aui-table-bar',\n\ttemplate: `<div class=\"aui-table-bar\">\n\t<div class=\"filters\" #ref [ngClass]=\"{open: open}\">\n\t\t<ng-content select=\"[auiTableBarItem]\"></ng-content>\n\t\t<div class=\"aui-table-bar-item\" *ngIf=\"open\">\n\t\t\t<button class=\"a-button a-button--transparent\" (click)=\"toggle()\">Show less...</button>\n\t\t</div>\n\t</div>\n\t<div class=\"show-more\" *ngIf=\"!open && invisibleItems\">\n\t\t<button class=\"a-button a-button--transparent\" (click)=\"toggle()\">Show more...</button>\n\t</div>\n\n\t<ng-content select=\"[auiTableBarSearch]\"></ng-content>\n</div>\n`,\n})\nexport class TableBarComponent implements DoCheck {\n\t@Input() filters: Filter[] = [];\n\t@Input() testFilter: Filter;\n\t@Output() filter = new EventEmitter();\n\tpublic open = false;\n\tpublic invisibleItems = false;\n\n\t@ViewChild('ref') ref;\n\n\tpublic ngDoCheck() {\n\t\tthis.countInvisibleItems();\n\t}\n\n\tpublic isInVisible(rectContainer, rectChild) {\n\t\treturn rectContainer.bottom < rectChild.top;\n\t}\n\n\tpublic countInvisibleItems() {\n\t\tconst rectContainer = this.ref.nativeElement.getBoundingClientRect();\n\t\tconst childNodes = this.ref.nativeElement.childNodes;\n\n\t\tfor (let i = childNodes.length - 1; i >= 0; i--) {\n\t\t\tconst o = childNodes[i];\n\t\t\tif (o.nodeName === 'AUI-TABLE-BAR-ITEM' && o.getBoundingClientRect) {\n\t\t\t\tconst rectChild = o.getBoundingClientRect();\n\t\t\t\tif (this.isInVisible(rectContainer, rectChild)) {\n\t\t\t\t\tthis.invisibleItems = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i === 0) {\n\t\t\t\tthis.invisibleItems = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toggle() {\n\t\tthis.open = !this.open;\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tComponentFactoryResolver,\n\tOnChanges,\n\tType,\n\tViewContainerRef,\n\tChangeDetectorRef\n} from '@angular/core';\nimport { Cell } from '../../types/table.types';\n\n@Component({\n\tselector: 'aui-table-cell',\n\ttemplate: `<ng-template *ngIf=\"hasComponent()\"></ng-template>\n<span *ngIf=\"!hasComponent()\">{{ value }}</span>\n`,\n})\nexport class TableCellComponent implements OnChanges {\n\t@Input() component: Type<any>;\n\t@Input() value: string;\n\n\tconstructor(\n\t\tpublic viewContainerRef: ViewContainerRef,\n\t\tprivate componentFactoryResolver: ComponentFactoryResolver,\n\t\tprivate changeDetectionRef: ChangeDetectorRef\n\t) { }\n\n\tpublic ngOnChanges() {\n\t\tif (this.component) {\n\t\t\tthis.loadComponent();\n\t\t}\n\t}\n\n\tpublic hasComponent() {\n\t\treturn !!this.component;\n\t}\n\n\tpublic loadComponent() {\n\t\tconst componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.component);\n\t\tconst viewContainerRef = this.viewContainerRef;\n\t\tviewContainerRef.clear();\n\n\t\tconst componentRef = viewContainerRef.createComponent(componentFactory);\n\t\t(<Cell>componentRef.instance).data = this.value;\n\t\tthis.changeDetectionRef.detectChanges();\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tComponentFactoryResolver,\n\tOnChanges,\n\tType,\n\tViewContainerRef,\n\tChangeDetectorRef\n} from '@angular/core';\nimport { Cell } from '../../types/table.types';\n\n@Component({\n\tselector: 'aui-table-header',\n\ttemplate: `<ng-template *ngIf=\"hasComponent()\"></ng-template>\n<span *ngIf=\"!hasComponent()\">{{ label }}</span>\n`,\n})\nexport class TableHeaderComponent implements OnChanges {\n\t@Input() component: Type<any>;\n\t@Input() label: string;\n\t@Input() value: any;\n\n\tconstructor(\n\t\tpublic viewContainerRef: ViewContainerRef,\n\t\tprivate componentFactoryResolver: ComponentFactoryResolver,\n\t\tprivate changeDetectionRef: ChangeDetectorRef\n\t) { }\n\n\tpublic ngOnChanges() {\n\t\tif (this.component) {\n\t\t\tthis.loadComponent();\n\t\t}\n\t}\n\n\tpublic hasComponent() {\n\t\treturn !!this.component;\n\t}\n\n\tpublic loadComponent() {\n\t\tconst componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.component);\n\t\tconst viewContainerRef = this.viewContainerRef;\n\t\tviewContainerRef.clear();\n\n\t\tconst componentRef = viewContainerRef.createComponent(componentFactory);\n\t\t(<Cell>componentRef.instance).data = this.value;\n\t\tthis.changeDetectionRef.detectChanges();\n\t}\n}\n","import { ColumnSelectorComponent } from './column-selector/column-selector.component';\nimport { TableComponent } from './table/table.component';\nimport { TableBarComponent } from './table-bar/table-bar.component';\nimport { TableCellComponent } from './table-cell/table-cell.component';\nimport { TableHeaderComponent } from './table-header/table-header.component';\n\nexport const Components = [\n\tColumnSelectorComponent,\n\tTableComponent,\n\tTableBarComponent,\n\tTableCellComponent,\n\tTableHeaderComponent,\n];\n","import { TableBarItemDirective } from './table-bar-item/table-bar-item.directive';\nimport { TableBarSearchDirective } from './table-bar-search/table-bar-search.directive';\n\nexport const Directives = [\n\tTableBarItemDirective,\n\tTableBarSearchDirective,\n];\n","import { HostBinding, Directive } from '@angular/core';\n\n@Directive({\n\tselector: '[auiTableBarItem]',\n})\nexport class TableBarItemDirective {\n\t@HostBinding('class.aui-table-bar-item') setClass = true;\n}\n","import { HostBinding, Directive } from '@angular/core';\n\n@Directive({\n\tselector: '[auiTableBarSearch]',\n})\nexport class TableBarSearchDirective {\n\t@HostBinding('class.aui-table-bar-search') setClass = true;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { Components } from './components';\nimport { Directives } from './directives';\n\nimport { TableHelperService } from './services/table-helper.service';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tFormsModule,\n\t],\n\tproviders: [\n\t\tTableHelperService,\n\t],\n\tdeclarations: [\n\t\tComponents,\n\t\tDirectives,\n\t],\n\texports: [\n\t\tComponents,\n\t\tDirectives,\n\t],\n})\nexport class TableModule {}\n","import { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { Filter } from '@acpaas-ui/ngx-components/utils';\n\nimport { TableRecord, TableColumn, OrderBy } from '../types/table.types';\n\nexport class Table {\n\t// Original data (json array from the server)\n\tprivate rawData: TableRecord[] = [];\n\n\t// Original columns config (from the app)\n\tprivate rawColumns: (TableColumn|string)[];\n\n\t// Array of filters\n\tpublic filters: Filter[] = [];\n\n\t// Pagination\n\tpublic page;\n\tpublic limit;\n\tpublic lastPage;\n\n\t// Sorting\n\tpublic orderBy: OrderBy;\n\n\tpublic filteredData: BehaviorSubject<any[]> = new BehaviorSubject([]);\n\tpublic rows: BehaviorSubject<any[]> = new BehaviorSubject([]);\n\tpublic columns: BehaviorSubject<any[]> = new BehaviorSubject([]);\n\n\t// Init stuff...\n\tconstructor() {}\n\n\t// ---------- GETTERS | SETTERS ---------- //\n\n\tpublic setRawData(data: any[]) {\n\t\tthis.rawData = data;\n\t\tthis.updateFilteredData();\n\t\tthis.setLastPage();\n\t\tthis.updateRows();\n\t}\n\n\tpublic setRawColumns(columns) {\n\t\tthis.rawColumns = columns;\n\t\tthis.updateColumns();\n\t}\n\n\tpublic setFilters(filters: Filter[]) {\n\t\tthis.filters = filters;\n\t\tthis.updateFilteredData();\n\t\tthis.setLastPage();\n\t\tthis.updateRows();\n\t}\n\n\tpublic addFilter(filter: Filter) {\n\t\tthis.filters.push(filter);\n\t\tthis.updateFilteredData();\n\t\tthis.setLastPage();\n\t\tthis.updateRows();\n\t}\n\n\tpublic setPage(i) {\n\t\tthis.page = Number(i); // something weird number >< string\n\t\tthis.updateRows();\n\t}\n\n\tpublic setLimit(i: number) {\n\t\tthis.limit = Number(i); // something weird number >< string\n\t\tthis.setLastPage();\n\t\tif (this.lastPage && this.page > this.lastPage) {\n\t\t\tthis.page = this.lastPage;\n\t\t}\n\t\tthis.updateRows();\n\t}\n\n\tpublic setOrderBy(o) {\n\t\tthis.orderBy = o;\n\t\tthis.updateFilteredData();\n\t\tthis.setLastPage();\n\t\tthis.updateRows();\n\t}\n\n\t// ---------- VIRTUAL PROPS ---------- //\n\n\tpublic getOffset() {\n\t\treturn (this.page * this.limit) - this.limit;\n\t}\n\n\t// ---------- PROPERTY HELPERS ---------- //\n\n\tpublic setLastPage() {\n\t\tconst d = this.filteredData.getValue();\n\t\tthis.lastPage = Math.ceil(d ? d.length / this.limit : 0);\n\t}\n\n\tpublic updateRows() {\n\t\tlet d = this.filteredData.getValue();\n\n\t\tif (this.orderBy) {\n\t\t\td = this.sortData(d, this.orderBy.key, this.orderBy.order);\n\t\t}\n\n\t\td = this.selectData(d, this.limit, this.getOffset());\n\n\t\tthis.rows.next(d);\n\t}\n\n\tpublic updateColumns() {\n\t\tconst c = this.filterHiddenColumns(this.rawColumns);\n\t\tthis.columns.next(c);\n\t}\n\n\tpublic updateFilteredData() {\n\t\tthis.filteredData.next(this.filterData(this.rawData, this.filters));\n\t}\n\n\t// ---------- ABSTRACT HELPERS ---------- //\n\n\tpublic filterData(data, filters: Filter[]) {\n\t\tlet d = data.slice();\n\n\t\tfilters.forEach((filter) => {\n\t\t\td = filter.parseData(d);\n\t\t});\n\n\t\treturn d;\n\t}\n\n\tpublic sortData(data, key, order = 'asc') {\n\t\tif (!data || !data.sort || !key) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst d = data.slice();\n\t\td.sort((a, b) => {\n\t\t\tif (a[key] < b[key]) {\n\t\t\t\treturn order === 'asc' ? -1 : 1;\n\t\t\t}\n\n\t\t\tif (a[key] > b[key]) {\n\t\t\t\treturn order === 'asc' ? 1 : -1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\n\t\treturn d;\n\t}\n\n\tpublic selectData(data, limit, offset) {\n\t\tif (data && limit >= 0 && offset >= 0) {\n\t\t\treturn data.slice(offset, offset + limit);\n\t\t}\n\t\treturn data;\n\t}\n\n\tpublic filterHiddenColumns(columns) {\n\t\treturn columns.filter((o) => {\n\t\t\treturn !o.hidden;\n\t\t});\n\t}\n}\n"]}